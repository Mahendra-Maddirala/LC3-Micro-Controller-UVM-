uvmf:
  interfaces:
    "imem":
      clock: "clock"
      reset: "reset"
      reset_assertion_level: "True"
      parameters: []
      hdl_typedefs:
        - name: "op_t"
          type: "enum bit [3:0] {ADD=4'b0001, AND=4'b0101, NOT=4'b1001, LD=4'b0010, LDR=4'b0110, LDI=4'b1010, LEA=4'b1110, ST=4'b0011, STR=4'b0111, STI=4'b1011, BR=4'b0000, JMP=4'b1100}"
        - name: "reg_t"
          type: "bit [2:0]"       
        - name: "baser_t"
          type: "bit [2:0]"       
        - name: "pcoffset9_t"
          type: "bit [8:0]"       
        - name: "pcoffset6_t"
          type: "bit [5:0]"       
        - name: "imm5_t"
          type: "bit [4:0]"       
        - name: "n_t"
          type: "bit"       
        - name: "z_t"
          type: "bit"       
        - name: "p_t"
          type: "bit"
        - name: "imm_t"
          type: "bit"
        - name: "npc_t"
          type: "bit [15:0]"
        - name: "instr_t"
          type: "bit [15:0]"
      ports: 
        - name: "pc"   
          width: "16"        
          dir: "output" 
        - name: "instrmem_rd"   
          width: "1"        
          dir: "output" 
        - name: "instr_dout"   
          width: "16"        
          dir: "input" 
        - name: "complete_instr"
          width: "1"
          dir: "input"
      transaction_vars:
        - name: "opcode"  
          type: "op_t"
          isrand: "True"
          iscompare: "False" 
        - name: "sr1"  
          type: "reg_t"
          isrand: "True"
          iscompare: "False" 
        - name: "sr2"  
          type: "reg_t"
          isrand: "True"
          iscompare: "False" 
        - name: "dr"  
          type: "reg_t"
          isrand: "True"
          iscompare: "False" 
        - name: "baser"  
          type: "baser_t"
          isrand: "True"
          iscompare: "False" 
        - name: "pcoffset9"  
          type: "pcoffset9_t"
          isrand: "True"
          iscompare: "False" 
        - name: "pcoffset6"  
          type: "pcoffset6_t"
          isrand: "True"
          iscompare: "False" 
        - name: "imm5"  
          type: "imm5_t"
          isrand: "True"
          iscompare: "False" 
        - name: "n"  
          type: "n_t"
          isrand: "True"
          iscompare: "False" 
        - name: "z"  
          type: "z_t"
          isrand: "True"
          iscompare: "False" 
        - name: "p"  
          type: "p_t"
          isrand: "True"
          iscompare: "False"
        - name: "imm"
          type: "imm_t"
          isrand: "True" 
          iscompare: "False"
        - name: "instruction"  
          type: "instr_t"
          isrand: "True"
          iscompare: "True"
        - name: "npc_in"
          type: "npc_t"
          isrand: "True"
          iscompare: "True"
      transaction_constraints:
        - name: "valid_opcodes_c"
          value: "{ opcode inside {ADD,AND,NOT,LD,LDR,LDI,LEA,ST,STR,STI,BR,JMP};} "
        - name: "nzp_dist_c"
          value: "{ {n,z,p} dist {0 :/ 100  , [1:6] :/ 100 , 7 :/ 100};}"
        - name: "add_c"
          value: "{if(opcode == ADD && imm == 0) instruction == {opcode,dr,sr1,3'b0,sr2}; if(opcode == ADD && imm == 1) instruction == {opcode,dr,sr1,1'b1,imm5};}"
        - name: "and_c"
          value: "{if(opcode == AND && imm == 0) instruction == {opcode,dr,sr1,3'b0,sr2}; if(opcode == AND && imm == 1) instruction == {opcode,dr,sr1,1'b1,imm5};}"
        - name: "not_c"
          value: "{if(opcode == NOT) instruction == {opcode,dr,sr1,6'h3f};}"
        - name: "ld_c"
          value: "{if(opcode == LD) instruction == {opcode,dr,pcoffset9};}"
        - name: "ldr_c"
          value: "{if(opcode == LDR) instruction == {opcode,dr,baser,pcoffset6};}"
        - name: "ldi_c"
          value: "{if(opcode == LDI) instruction == {opcode,dr,pcoffset9};}"
        - name: "lea_c"
          value: "{if(opcode == LEA) instruction == {opcode,dr,pcoffset9};}"
        - name: "st_c"
          value: "{if(opcode == ST) instruction == {opcode,sr1,pcoffset9};}"
        - name: "str_c"
          value: "{if(opcode == STR) instruction == {opcode,sr1,baser,pcoffset6};}"
        - name: "sti_c"
          value: "{if(opcode == STI) instruction == {opcode,sr1,pcoffset9};}"
        - name: "br_c"
          value: "{if(opcode == BR) instruction == {opcode,n,z,p,pcoffset9};}"
        - name: "jmp_c"
          value: "{if(opcode == JMP) instruction == {opcode,3'b0,baser,6'b0};}"
